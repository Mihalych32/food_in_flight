version: '3.7'

volumes:
  pgdata:
# tar backup: docker run --rm -v pgdata:/dbdata -v $(pwd):/backup alpine tar cvf /backup/backup.tar /dbdata
# untar backup: docker run --rm -v pgdata:/dbdata -v $(pwd):/backup alpine bash -c "cd /dbdata && tar xvf /backup/backup.tar --strip 1"

networks:
  backnet:
    driver: bridge
    internal: true
  frontnet:
    driver: bridge

services:
  foodinflight_backend:
    container_name: foodinflight_backend
    depends_on:
      - foodinflight_postgres
    build:
      context: .
      dockerfile: configs/Dockerfile_backend
    volumes:
      - ./foodinflight_backend/media:/app/media
      - ./foodinflight_backend/static:/app/static
      - ./logs:/logs
      - ./data/uwsgi:/uwsgi
    networks:
      - backnet

  foodinflight_nginx:
    container_name: foodinflight_nginx
    depends_on:
      - foodinflight_backend
      - foodinflight_certbot
    image: nginx:alpine
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf
      - ./configs/uwsgi_params:/uwsgi
      - ./foodinflight_backend/media:/web/media
      - ./foodinflight_backend/static:/web/static
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    environment:
      - NGINX_HOST=${HOST_DOMAIN}
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    ports:
      - "80:80"
      - "443:443"
    networks:
      - frontnet

  foodinflight_certbot:
    container_name: foodinflight_certbot
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  foodinflight_postgres:
    container_name: foodinflight_postgres
    image: postgres:alpine
    command:
      - "postgres"
      - "-c"
      - "config_file=/etc/postgresql.conf"
    environment:
      POSTGRES_DB: "${POSTGRES_NAME}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    volumes:
      - pgdata:/var/lib/postgresql/data            # docker volume usage
      - ./configs/postgresql.conf:/etc/postgresql.conf
      - ./logs:/logs
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - backnet
